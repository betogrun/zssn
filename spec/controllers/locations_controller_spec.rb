require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LocationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Location. As you add validations to Location, be sure to
  # adjust the attributes here as well.
  let(:survivor) {FactoryGirl.create(:survivor)}
  let(:valid_attributes) {
    {lat: "-22.005773", lon: "-47.904264", survivor_id: survivor.id}
  }

  let(:invalid_attributes) {
    {lat: "00000", lon: "00000", survivor: survivor}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LocationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all locations as @locations" do
      location = Location.create! valid_attributes
      get :index, params: {:survivor_id => survivor}, session: valid_session
      expect(assigns(:locations)).to eq([location])
    end
  end



  describe "POST #create" do
    context "with valid params" do
      it "creates a new Location" do
        expect {
          post :create, params: {survivor_id: survivor.id, location: valid_attributes}, session: valid_session
        }.to change(Location, :count).by(1)
      end

      it "assigns a newly created location as @location" do
        post :create, params: {survivor_id: survivor.id, location: valid_attributes}, session: valid_session
        expect(assigns(:location)).to be_a(Location)
        expect(assigns(:location)).to be_persisted
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved location as @location" do
        post :create, params: {survivor_id: survivor.id, location: invalid_attributes}, session: valid_session
        expect(assigns(:location)).to be_a_new(Location)
      end

    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {lat: "-28.005773", lon: "-41.904264", survivor_id: survivor.id}
      }

      it "updates the requested location" do
        location = Location.create! valid_attributes
        put :update, params: {survivor_id: survivor.id, id: location.to_param, location: new_attributes}, session: valid_session
        location.reload
        expect(location.lat).to eq("-28.005773")
        expect(location.lon).to eq("-41.904264")
      end

      it "assigns the requested location as @location" do
        location = Location.create! valid_attributes
        put :update, params: {survivor_id: survivor.id, id: location.to_param, location: valid_attributes}, session: valid_session
        expect(assigns(:location)).to eq(location)
      end
    end

    context "with invalid params" do
      it "assigns the location as @location" do
        location = Location.create! valid_attributes
        put :update, params: {survivor_id: survivor.id, id: location.to_param, location: invalid_attributes}, session: valid_session
        expect(assigns(:location)).to eq(location)
      end

    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested location" do
      location = Location.create! valid_attributes
      expect {
        delete :destroy, params: {survivor_id: survivor.id, id: location.to_param}, session: valid_session
      }.to change(Location, :count).by(-1)
    end

  end

end
