require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ItemsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Item. As you add validations to Item, be sure to
  # adjust the attributes here as well.
  let(:survivor) {FactoryGirl.create(:survivor)}
  let(:valid_attributes) {
    {amount: 10, kind: :food, survivor_id: survivor.id}
  }

  let(:invalid_attributes) {
    {amount: 0, kind: :food, survivor_id: survivor.id}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ItemsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all items as @items" do
      item = Item.create! valid_attributes
      get :index, params: {survivor_id: survivor.id}, session: valid_session
      expect(assigns(:items)).to eq([item])
    end
  end

  describe "GET #show" do
    it "assigns the requested item as @item" do
      item = Item.create! valid_attributes
      get :show, params: {survivor_id: survivor.id, id: item.to_param}, session: valid_session
      expect(assigns(:item)).to eq(item)
    end
  end


  describe "POST #create" do
    context "with valid params" do
      it "creates a new Item" do
        expect {
          post :create, params: {survivor_id: survivor.id, item: valid_attributes}, session: valid_session
        }.to change(Item, :count).by(1)
      end

      it "assigns a newly created item as @item" do
        post :create, params: {survivor_id: survivor.id, item: valid_attributes}, session: valid_session
        expect(assigns(:item)).to be_a(Item)
        expect(assigns(:item)).to be_persisted
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {amount: 25, kind: :food, survivor_id: survivor.id}
      }

      it "updates the requested item" do
        item = Item.create! valid_attributes
        put :update, params: {survivor_id: survivor.id, id: item.to_param, item: new_attributes}, session: valid_session
        item.reload
        expect(item.amount).to eq(25)
      end

      it "assigns the requested item as @item" do
        item = Item.create! valid_attributes
        put :update, params: {survivor_id: survivor.id, id: item.to_param, item: valid_attributes}, session: valid_session
        expect(assigns(:item)).to eq(item)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested item" do
      item = Item.create! valid_attributes
      expect {
        delete :destroy, params: {survivor_id: survivor.id, id: item.to_param}, session: valid_session
      }.to change(Item, :count).by(-1)
    end
  end

end
